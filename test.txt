-0.766067,0.133557,0.628732
1,1,0
-0.594691,0.160456,0.78778
2,1,0
-0.295256,0.178446,0.938606
3,1,0
0.102932,0.174114,0.979331
4,1,0
0.443511,0.143739,0.884668
5,1,0
-0.886697,0.207873,0.412986
1,2,0
-0.754446,0.277026,0.595035
2,2,0
-0.418351,0.362594,0.832771
3,2,0
0.19814,0.366008,0.909274
4,2,0
0.633061,0.268184,0.726162
5,2,0
-0.88874,0.41737,0.189586
2,3,0

-0.766082,0.133558,0.628714
100,100,0
-0.594698,0.16046,0.787773
200,100,0
-0.295256,0.178446,0.938606
300,100,0
0.102943,0.174059,0.97934
400,100,0
0.443518,0.143736,0.884665
500,100,0
-0.886565,0.207844,0.413283
100,200,0
-0.754445,0.277027,0.595037
200,200,0
-0.41841,0.362683,0.832703
300,200,0
-0.888764,0.417398,0.189412
200,300,0
0.198144,0.366018,0.909269
400,200,0
0.63306,0.268185,0.726162
500,200,0

cv::Mat CameraSystemExtrinsicCalibUseBoard::CalcCameraSystemExtrinsic(
    cv::Mat &img, Points_Image_World &points_of_image_world,
    const std::string &img_file) {
  std::vector<cv::Point2f> img_points = points_of_image_world.points_image;
  std::vector<cv::Point2f> world_points = points_of_image_world.points_world;
  // cv::Mat img_ = img.clone();
  cv::Mat img_ = cv::imread(img_file, CV_LOAD_IMAGE_GRAYSCALE);
  // prepare opengv data
  opengv::bearingVectors_t bearings;
  opengv::points_t points3D;
  for (size_t i = 0; i < img_points.size(); i++) {
    cv::Point2f point2d = img_points[i];
    cv::Point2f worldpoint = world_points[i];
    cv::Point3f p3 = camera_param_->Camera2World(
        cv::Point2f(point2d.x, point2d.y + float(image_row_offset)));
    bearings.push_back(opengv::bearingVector_t(p3.x, p3.y, p3.z));
    points3D.push_back(opengv::point_t(worldpoint.x, worldpoint.y, 0));
  }
  cv::Mat Twc;
  cv::Mat Twc_nonlinear;
  Optimizer::CalculateTwc(Twc, Twc_nonlinear, bearings, points3D);
  cv::Mat Tcw = Twc_nonlinear.inv();
  cv::Mat Rcw = Tcw.rowRange(0, 3).colRange(0, 3);
  cv::Mat tcw = Tcw.rowRange(0, 3).col(3);
  ProjectChessboardPoints(img, Tcw, world_points, camera_param_,
                          cv::Scalar(0, 255, 0));
  ProjectChessboardPoints(img, Twc_nonlinear.inv(), world_points, camera_param_,
                          cv::Scalar(0, 0, 255));
  cv::imshow("ChessBoard Points Reprojection", img);
  cv::waitKey(0);
  
  
#include <opencv2/opencv.hpp>
#include <opengv/absolute_pose/CentralAbsoluteAdapter.hpp>
#include <opengv/absolute_pose/methods.hpp>
#include <opengv/sac/Ransac.hpp>
#include <opengv/sac_problems/absolute_pose/AbsolutePoseSacProblem.hpp>

void Optimizer::CalculateTwc(cv::Mat &Twc, cv::Mat &Twc_nonlinear,
                             opengv::bearingVectors_t bearings,
                             opengv::points_t points3D) {

  size_t iterations = 50;

  opengv::absolute_pose::CentralAbsoluteAdapter adapter(bearings, points3D);
  opengv::sac::Ransac<
      opengv::sac_problems::absolute_pose::AbsolutePoseSacProblem>
      ransac;
  std::shared_ptr<opengv::sac_problems::absolute_pose::AbsolutePoseSacProblem>
      absposeproblem_ptr(
          new opengv::sac_problems::absolute_pose::AbsolutePoseSacProblem(
              adapter, opengv::sac_problems::absolute_pose::
                           AbsolutePoseSacProblem::KNEIP));

  std::vector<int> inliers;

  ransac.sac_model_ = absposeproblem_ptr;
  ransac.threshold_ = 0.02;
  ransac.max_iterations_ = 200;
  ransac.computeModel();
  inliers = ransac.inliers_;
  opengv::transformation_t trafo = ransac.model_coefficients_;

  std::cout << " Kneip PnP result : " << std::endl;
  std::cout << trafo << std::endl;

  Twc = cv::Mat::eye(4, 4, CV_32F);
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 4; j++) {
      Twc.at<float>(i, j) = (float)trafo(i, j);
    }
  }

  // use nonlinear optimization to get better result
  opengv::translation_t position;
  opengv::rotation_t rotation;
  for (int i = 0; i < 3; i++) {
    position(i) = trafo(i, 3);
    for (int j = 0; j < 3; j++) {
      rotation(i, j) = trafo(i, j);
    }
  }
  adapter.setR(rotation);
  adapter.sett(position);

  std::cout << rotation << std::endl;
  std::cout << position << std::endl;
  for (int i = 0; i < iterations; i++)
    trafo = opengv::absolute_pose::optimize_nonlinear(adapter);
  std::cout << " nonlinear optimization result : " << std::endl;
  std::cout << trafo << std::endl;

  Twc_nonlinear = cv::Mat::eye(4, 4, CV_32F);
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 4; j++) {
      Twc_nonlinear.at<float>(i, j) = (float)trafo(i, j);
    }
  }
}
******************************0**************
1340.05,496.183
1.09869,-0.301562,1
0.724761,-0.198928,0.659658
579,30,0
1340.05,496.183
******************************1**************
1417.17,534.438
1.46828,-0.212088,1
0.820688,-0.118545,0.558944
579,90,0
1417.17,534.438
******************************2**************
1511.96,590.273
2.18129,-0.0402231,1
0.908899,-0.0167602,0.41668
579,150,0
1511.96,590.273
******************************3**************
1619.24,668.497
3.62105,0.373896,1
0.959179,0.0990411,0.26489
579,210,0
1601.27,666.642
******************************4**************
1268.68,494.417
0.827013,-0.284235,1
0.622547,-0.213962,0.752765
519,30,0
1268.68,494.417
******************************5**************
1347.72,534.855
1.1196,-0.189496,1
0.739947,-0.125239,0.660903
519,90,0
1347.72,534.855
******************************6**************
1453.83,599.344
1.68887,-0.00377575,1
0.860472,-0.00192372,0.509494
519,150,0
1453.83,599.344
******************************7**************
1582.8,698.678
3.28145,0.51773,1
0.945857,0.149232,0.288244
519,210,0
1582.8,698.678
******************************8**************
1179.96,494.19
0.552829,-0.267258,1
0.471103,-0.227749,0.852169
459,30,0
1179.96,494.19
******************************9**************
1250.03,537.452
0.756993,-0.164518,1
0.598436,-0.130059,0.790544
459,90,0
1250.03,537.452
******************************10**************
1359.79,613.013
1.16488,0.0366287,1
0.758547,0.0238519,0.651181
459,150,0
1359.79,613.013
******************************11**************
1514.99,747.506
2.34735,0.622209,1
0.893803,0.236919,0.38077
459,210,0
1514.99,747.506
******************************12**************
1060.8,498.031
0.241606,-0.245854,1
0.228417,-0.232433,0.94541
392,30,0
1060.8,498.031
******************************13**************
1103.9,543.642
0.346336,-0.136868,1
0.324561,-0.128263,0.937128
392,90,0
1103.9,543.642
******************************14**************
1182.09,634.431
0.551791,0.0844957,1
0.481806,0.0737788,0.873167
392,150,0
1182.09,634.431
******************************15**************
1334.47,837.624
1.16431,0.737785,1
0.683712,0.433247,0.587226
392,210,0
1334.47,837.624
******************************16**************
941.788,503.901
-0.0435299,-0.228978,1
-0.0423936,-0.223001,0.973896
332,30,0
941.788,503.901
******************************17**************
945.061,553.105
-0.0354947,-0.111423,1
-0.0352545,-0.110669,0.993232
332,90,0
945.061,553.105
******************************18**************
951.804,654.309
-0.0196365,0.126833,1
-0.0194767,0.125801,0.991864
332,150,0
951.804,654.309
******************************19**************
821.766,513.745
-0.334435,-0.209564,1
-0.311083,-0.194932,0.930177
272,30,0
821.766,513.745
******************************20**************
785.446,564.969
-0.424715,-0.0862616,1
-0.389692,-0.0791483,0.917538
272,90,0
785.446,564.969
******************************21**************
718.695,667.202
-0.609674,0.168575,1
-0.515246,0.142466,0.845118
272,150,0
718.695,667.202
******************************22**************
594.856,893.286
-1.18756,0.952112,1
-0.65207,0.522791,0.549085
272,210,0
594.856,893.286
******************************23**************
698.672,526.835
-0.669795,-0.188586,1
-0.54979,-0.154798,0.820834
205,30,0
698.672,526.835
******************************24**************
633.168,580.509
-0.877551,-0.0535172,1
-0.659057,-0.0401924,0.751018
205,90,0
633.168,580.509
******************************25**************
534.466,672.302
-1.29976,0.21942,1
-0.785569,0.132616,0.604396
205,150,0
534.466,672.302
